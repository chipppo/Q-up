"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from datetime import timedelta
from pathlib import Path
import os
import sys
import logging
from dotenv import load_dotenv

# Път до коренната директория на проекта
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables first - BEFORE any imports or settings that might use them
dotenv_path = os.path.join(BASE_DIR, '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)
    print(f"Loaded environment variables from {dotenv_path}")
else:
    print(f"Warning: No .env file found at {dotenv_path}")

# Set up logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)s %(message)s',
    filename='/var/log/gunicorn/django-debug.log',
    filemode='a'
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-fh&k6=oa(wn$kx!$senwp)y9f2a-r=cfirgc3h(ghogek827wz'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '51.20.183.126', 
    'localhost',
    '127.0.0.1',
]

#модел за потребители вместо стандартния
AUTH_USER_MODEL = 'base.MyUser'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'base',
    'storages',
]

# Настройки на АПИ за JWT автентикация
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
}

# Настройки на JWT токени
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'AUTH_HEADER_TYPES': ('Bearer',),
}


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'base.middleware.S3UploadMiddleware',
]

# Разрешава CORS заявки от всички домейни - опасно 
CORS_ALLOW_ALL_ORIGINS = True

# Разрешава изпращане на credentials (cookies, auth headers) при CORS заявки
CORS_ALLOW_CREDENTIALS = True

# Настройки за медийни файлове (качени от потребители)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Основен URL конфигурационен файл
ROOT_URLCONF = 'backend.urls'

# Настройки на шаблони
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Настройки на база данни
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


#правила за сигурност
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


#интернационализация
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

STATIC_URL = 'static/'

# Тип на първичния ключ по подразбиране
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# URL на фронтенд частта за възстановяване на пароли
FRONTEND_URL = 'http://localhost:5173'

# Настройки на имейл за Gmail
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'qupbot@gmail.com'
EMAIL_HOST_PASSWORD = 'aovngiuobwwrlcrz' 
DEFAULT_FROM_EMAIL = 'Q-up Support qupbot@gmail.com'

# Време за валидност на линка за възстановяване на парола (в секунди)
PASSWORD_RESET_TIMEOUT = 3600

# AWS S3 Settings (using environment variables only - no hardcoded values)
AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.environ.get('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.environ.get('AWS_S3_REGION_NAME')

# Debug logging for environment variables
if not all([AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_STORAGE_BUCKET_NAME, AWS_S3_REGION_NAME]):
    print(f"WARNING: Missing AWS credentials - AWS_ACCESS_KEY_ID: {'✓' if AWS_ACCESS_KEY_ID else '✗'}, " +
          f"AWS_SECRET_ACCESS_KEY: {'✓' if AWS_SECRET_ACCESS_KEY else '✗'}, " +
          f"AWS_STORAGE_BUCKET_NAME: {'✓' if AWS_STORAGE_BUCKET_NAME else '✗'}, " +
          f"AWS_S3_REGION_NAME: {'✓' if AWS_S3_REGION_NAME else '✗'}")
    print(f"Environment file path: {os.path.join(BASE_DIR, '.env')}")
    print(f"Environment file exists: {os.path.exists(os.path.join(BASE_DIR, '.env'))}")
else:
    print(f"AWS credentials loaded successfully: " +
          f"AWS_ACCESS_KEY_ID: {AWS_ACCESS_KEY_ID[:4]}...{AWS_ACCESS_KEY_ID[-4:]}, " +
          f"Bucket: {AWS_STORAGE_BUCKET_NAME}, Region: {AWS_S3_REGION_NAME}")

# Full S3 configuration - force usage of environment variables directly
if AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY and AWS_STORAGE_BUCKET_NAME and AWS_S3_REGION_NAME:
    import boto3
    import logging
    
    # Force all S3 operations to use these credentials directly
    AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
    AWS_S3_ADDRESSING_STYLE = 'virtual'
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_SIGNATURE_VERSION = 's3v4'
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': 'max-age=86400',
    }
    
    # Storage backends
    DEFAULT_FILE_STORAGE = 'backend.storage_backends.MediaStorage'
    STATICFILES_STORAGE = 'backend.storage_backends.StaticStorage'
    
    # URL patterns
    S3_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com'
    STATIC_URL = f'{S3_URL}/static/'
    MEDIA_URL = f'{S3_URL}/media/'
    MEDIA_ROOT = '' # Django shouldn't handle media root when using S3 storage
    
    # Enable boto3 debug logging
    boto3_logger = logging.getLogger('boto3')
    boto3_logger.setLevel(logging.DEBUG)
    botocore_logger = logging.getLogger('botocore')
    botocore_logger.setLevel(logging.DEBUG)
    
    # Set up boto3 directly to test credentials
    try:
        s3_client = boto3.client(
            's3',
            aws_access_key_id=AWS_ACCESS_KEY_ID,
            aws_secret_access_key=AWS_SECRET_ACCESS_KEY,
            region_name=AWS_S3_REGION_NAME
        )
        print(f"Successfully created S3 client with credentials")
        
        # Test credentials with bucket access
        try:
            s3_client.put_object(
                Bucket=AWS_STORAGE_BUCKET_NAME,
                Key="settings-test.txt",
                Body=b"Test file created from settings.py",
                ContentType="text/plain"
            )
            print(f"Successfully uploaded test file to bucket {AWS_STORAGE_BUCKET_NAME}")
        except Exception as e:
            print(f"ERROR: Failed to upload test file to bucket: {str(e)}")
    except Exception as e:
        print(f"ERROR: Failed to initialize S3 client: {str(e)}")
    
    print("S3 storage configuration complete")
else:
    # Fallback to local storage
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    print("Using local file storage because S3 environment variables are not properly configured")

# Configure CORS to allow access to S3 resources
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173",
    "http://localhost:8000",
    "http://51.20.183.126",
]

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/tmp/django-debug.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'backend': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
    'root': {
        'handlers': ['file', 'console'],
        'level': 'DEBUG',
    },
}
# Ensure any standalone definitions of MEDIA_URL, MEDIA_ROOT, STATIC_URL below are removed or commented out
# For example:
# MEDIA_URL = '/media/' # REMOVE or comment out
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # REMOVE or comment out
# STATIC_URL = 'static/' # REMOVE or comment out
